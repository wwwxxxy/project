#include <stdio.h>
#include "include/stack.h"
#include "include/queue.h"
#include "include/tree.h"
#include "include/graph.h"
#define STACK_INIT_size 100
#define stackincreament 10
#define M 100;
#define link 0;
#define thread 1;
#define N 20;
#define X 100;
typedef struct//栈的结构
{
    int *base;
    int *top;
    int stacksize;
}SqStack;

typedef struct QNode
{
    int data;
    struct QNode* next;
}QNode,*Queueptr;

typedef struct//队列结构
{
    Queueptr front;
    Queueptr rear;
}LinkQueue;


typedef struct BiTNode//二叉树结构
{
    int data;
    struct BiTNode *lchild,*rchild;
}BiTNode,* BiTree;
typedef struct Queue{
    BiTree *base;
    int front;
    int rear;
    int QueueSize;
}Queue;


void stacktest()//栈的测试
{
    int i,j;
    SqStack S;
    InitStack(&S);
    printf("将0到9依次存入栈中：");
    for (i=0;i<10;i++)
    {
        Push(&S,i);
    }
    StackTraverse(S);

    printf("读取栈顶元素（不删除）：");
    j=GetTop(S);
    printf("%d",j);

    printf("\n删除栈顶元素：");
    j=Pop(&S);
    StackTraverse(S);
    printf("所删除的栈顶元素是：");
    printf("%d",j);

    printf("\n此时栈的长度：");
    j=StackLength(S);
    printf("%d",j);

    printf("\n");
    StackEmpty(S);
    return 0;
}


void queuetest()//队列测试
{

    LinkQueue Q;
    InitQueue(&Q);
    printf("QueueEmpty函数检测    创建队列后判断栈空：");
    QueueEmpty(Q);

    printf("\n\nQueueTraverse（查看队列元素）函数的检测   将1—10放入队列中，此时队列的元素为：");
    for (i=1;i<11;i++)
    {
        EnQueue(&Q,i);
        QueueLength(Q);
    }
    QueueTraverse(Q);
    printf("\n此时队列长度：");
    QueueLength(Q);
    printf("\nGetHead函数检测   队列头的元素：");
    GetHead(Q);
    printf("\nDeQueue函数检测   删除队列元素后队列元素为：");
    DeQueue(&Q);
    DeQueue(&Q);
    DeQueue(&Q);
    QueueTraverse(Q);
    printf("\n此时队列长度为：");
    QueueLength(Q);
    DestroyQueue(&Q);
    return 0;
}
void treetest()
{
     BiTree T,q,c;
    printf("请输入一棵二叉树（先序遍历的顺序）：\n");
    createBiTree(&T);
    InitBiTree(&c);


    if(!BiTreeEmpty(&T))
    {   q=T->lchild;q=q->rchild;

        printf("层序遍历：");
        LevelOrderTraverse(&T);
        printf("\n");

        printf("先序遍历：");       
        PreOrderTraverse_1(T,print);
        printf("\n");

        printf("中序遍历：");
        InOrderTraverse_1(T,print);
        printf("\n");

        printf("后序遍历：");
        PostOrderTraverse_1(T,print);
        printf("\n");

        printf("q结点的值：");
        printf("%d \n",Value(q));

        printf("q的父节点：");
        printf("%d \n",(Parent(&T,&q)->data));
        printf("q的左兄弟：");
        printf("%d \n",Value((LeftSibling(&T,&q))));
        printf("q的右兄弟：");
        printf("%d \n",Value((RightSibling(&T,&q))));

        printf("q赋值100后遍历（先序）："); 
        Assign(&T,&q,100);
        PreOrderTraverse_1(T,print);printf("\n");

        printf("q的左儿子值变成a，原q的左儿子变成a的右儿子（a=12)：");
        InsertChild(&T,&q,12,c);
        PreOrderTraverse_1(T,print);printf("\n");

        printf("删除q的左儿子后遍历（先序）：");
        DeleteChild(&T,&q,0);
        PreOrderTraverse_1(T,print);printf("\n");
    }
}
/*1 2 4 0 0 5 6 0 7 0 0 0 3 0 0 */

void graphtest()//图的测试
{
    MGraph G;

    int j,k,p,q,m,n;
    printf("请输入图的类型：");
    scanf("%d",&G.kind);
    printf("请输入点数，边数：\n");
    scanf("%d %d",&k,&j);
    G.vnum=k;
    G.anum=j;
    for (p=1;p<=G.vnum;p++)
    {
        for(q=1;q<=G.vnum;q++)
        {
            if (p==q)G.arcs[p][q]=0;
            else
                G.arcs[p][q]=X;
        }
    }
    printf("请输入点到另一点及其之间的距离：\n");
    for(j=0;j<G.anum;j++)
    {
        scanf("%d %d %d",&p,&k,&q);
        G.arcs[p][q]=k;
        if (G.kind==1)
        {
            G.arcs[q][p]=k;
        }
    }
    printf("\n1.找到和第一个点有关的边(重复说明在有向图中两点互相可达）：");
    adjvex(G,1);

    printf("\n2.请输入求最短距离的两端点并输出最短路径：");
    scanf("%d %d",&m,&n);
    ShortesPath_DIJ(G,m,n);

    printf("\n3.增加一个点：\n");
    addvex(G);

    printf("\n4.删除一个点：\n");
    destroyvex(G);

    printf("\n5.增加一条边：");
    addanum(G);

    printf("\n6.删除一条边：");
    destroyanum(G);

    getchar();getchar();getchar();
    return 0;
}

